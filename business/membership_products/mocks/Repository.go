// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	membership_products "gym-membership/business/membership_products"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: id
func (_m *Repository) DeleteByID(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]membership_products.Domain, error) {
	ret := _m.Called()

	var r0 []membership_products.Domain
	if rf, ok := ret.Get(0).(func() []membership_products.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]membership_products.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *Repository) GetByID(id uint) (membership_products.Domain, error) {
	ret := _m.Called(id)

	var r0 membership_products.Domain
	if rf, ok := ret.Get(0).(func(uint) membership_products.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(membership_products.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *Repository) Insert(newData *membership_products.Domain) (membership_products.Domain, error) {
	ret := _m.Called(newData)

	var r0 membership_products.Domain
	if rf, ok := ret.Get(0).(func(*membership_products.Domain) membership_products.Domain); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(membership_products.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*membership_products.Domain) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: id, newData
func (_m *Repository) UpdateByID(id uint, newData *membership_products.Domain) (membership_products.Domain, error) {
	ret := _m.Called(id, newData)

	var r0 membership_products.Domain
	if rf, ok := ret.Get(0).(func(uint, *membership_products.Domain) membership_products.Domain); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(membership_products.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *membership_products.Domain) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
