// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	classification "gym-membership/business/classification"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *Repository) GetAll() ([]classification.Domain, error) {
	ret := _m.Called()

	var r0 []classification.Domain
	if rf, ok := ret.Get(0).(func() []classification.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]classification.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClassificationID provides a mock function with given fields: name
func (_m *Repository) GetClassificationID(name string) (uint, error) {
	ret := _m.Called(name)

	var r0 uint
	if rf, ok := ret.Get(0).(func(string) uint); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: _a0
func (_m *Repository) Insert(_a0 *classification.Domain) (classification.Domain, error) {
	ret := _m.Called(_a0)

	var r0 classification.Domain
	if rf, ok := ret.Get(0).(func(*classification.Domain) classification.Domain); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(classification.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*classification.Domain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
