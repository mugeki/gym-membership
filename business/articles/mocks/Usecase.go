// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	articles "gym-membership/business/articles"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: title, page
func (_m *Usecase) GetAll(title string, page int) ([]articles.Domain, int, int, int64, error) {
	ret := _m.Called(title, page)

	var r0 []articles.Domain
	if rf, ok := ret.Get(0).(func(string, int) []articles.Domain); ok {
		r0 = rf(title, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(title, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string, int) int); ok {
		r2 = rf(title, page)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 int64
	if rf, ok := ret.Get(3).(func(string, int) int64); ok {
		r3 = rf(title, page)
	} else {
		r3 = ret.Get(3).(int64)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(string, int) error); ok {
		r4 = rf(title, page)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// Insert provides a mock function with given fields: articleData, adminID
func (_m *Usecase) Insert(articleData *articles.Domain, adminID uint) (string, error) {
	ret := _m.Called(articleData, adminID)

	var r0 string
	if rf, ok := ret.Get(0).(func(*articles.Domain, uint) string); ok {
		r0 = rf(articleData, adminID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*articles.Domain, uint) error); ok {
		r1 = rf(articleData, adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticleByID provides a mock function with given fields: id, articleData, adminID
func (_m *Usecase) UpdateArticleByID(id uint, articleData *articles.Domain, adminID uint) (string, error) {
	ret := _m.Called(id, articleData, adminID)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint, *articles.Domain, uint) string); ok {
		r0 = rf(id, articleData, adminID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *articles.Domain, uint) error); ok {
		r1 = rf(id, articleData, adminID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
