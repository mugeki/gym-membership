// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	articles "gym-membership/business/articles"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: title, offset, limit
func (_m *Repository) GetAll(title string, offset int, limit int) ([]articles.Domain, int64, error) {
	ret := _m.Called(title, offset, limit)

	var r0 []articles.Domain
	if rf, ok := ret.Get(0).(func(string, int, int) []articles.Domain); ok {
		r0 = rf(title, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.Domain)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(string, int, int) int64); ok {
		r1 = rf(title, offset, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int, int) error); ok {
		r2 = rf(title, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Insert provides a mock function with given fields: videoData
func (_m *Repository) Insert(videoData *articles.Domain) (articles.Domain, error) {
	ret := _m.Called(videoData)

	var r0 articles.Domain
	if rf, ok := ret.Get(0).(func(*articles.Domain) articles.Domain); ok {
		r0 = rf(videoData)
	} else {
		r0 = ret.Get(0).(articles.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*articles.Domain) error); ok {
		r1 = rf(videoData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: id, articleData
func (_m *Repository) UpdateByID(id uint, articleData *articles.Domain) (articles.Domain, error) {
	ret := _m.Called(id, articleData)

	var r0 articles.Domain
	if rf, ok := ret.Get(0).(func(uint, *articles.Domain) articles.Domain); ok {
		r0 = rf(id, articleData)
	} else {
		r0 = ret.Get(0).(articles.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *articles.Domain) error); ok {
		r1 = rf(id, articleData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
