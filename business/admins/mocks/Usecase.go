// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	admins "gym-membership/business/admins"

	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// DeleteByID provides a mock function with given fields: id
func (_m *Usecase) DeleteByID(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: name, page
func (_m *Usecase) GetAll(name string, page int) ([]admins.Domain, int, int, int64, error) {
	ret := _m.Called(name, page)

	var r0 []admins.Domain
	if rf, ok := ret.Get(0).(func(string, int) []admins.Domain); ok {
		r0 = rf(name, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admins.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int) int); ok {
		r1 = rf(name, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(string, int) int); ok {
		r2 = rf(name, page)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 int64
	if rf, ok := ret.Get(3).(func(string, int) int64); ok {
		r3 = rf(name, page)
	} else {
		r3 = ret.Get(3).(int64)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(string, int) error); ok {
		r4 = rf(name, page)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// Login provides a mock function with given fields: username, password
func (_m *Usecase) Login(username string, password string) (admins.Domain, error) {
	ret := _m.Called(username, password)

	var r0 admins.Domain
	if rf, ok := ret.Get(0).(func(string, string) admins.Domain); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(admins.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: adminData
func (_m *Usecase) Register(adminData *admins.Domain) (admins.Domain, error) {
	ret := _m.Called(adminData)

	var r0 admins.Domain
	if rf, ok := ret.Get(0).(func(*admins.Domain) admins.Domain); ok {
		r0 = rf(adminData)
	} else {
		r0 = ret.Get(0).(admins.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*admins.Domain) error); ok {
		r1 = rf(adminData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, adminData
func (_m *Usecase) Update(id uint, adminData *admins.Domain) (admins.Domain, error) {
	ret := _m.Called(id, adminData)

	var r0 admins.Domain
	if rf, ok := ret.Get(0).(func(uint, *admins.Domain) admins.Domain); ok {
		r0 = rf(id, adminData)
	} else {
		r0 = ret.Get(0).(admins.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, *admins.Domain) error); ok {
		r1 = rf(id, adminData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
